# === 1. –Ü–º–ø–æ—Ä—Ç –±—ñ–±–ª—ñ–æ—Ç–µ–∫ ===
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import statsmodels.api as sm
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.arima.model import ARIMA

# === 2. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö ===
data = pd.read_csv("user_activity.csv", parse_dates=['date'])
data.set_index('date', inplace=True)
data = data.sort_index()

# === 3. –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –≥—Ä–∞—Ñ—ñ–∫ ===
plt.figure(figsize=(10, 4))
plt.plot(data['views'], label='–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤')
plt.title('–ü–æ—á–∞—Ç–∫–æ–≤–∏–π —á–∞—Å–æ–≤–∏–π —Ä—è–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ')
plt.xlabel('–î–∞—Ç–∞')
plt.ylabel('–ü–µ—Ä–µ–≥–ª—è–¥–∏')
plt.legend()
plt.grid()
plt.show()

# === 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ü—ñ–æ–Ω–∞—Ä–Ω–æ—Å—Ç—ñ (ADF-—Ç–µ—Å—Ç) ===
result = adfuller(data['views'])
print("ADF-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", result[0])
print("p-–∑–Ω–∞—á–µ–Ω–Ω—è:", result[1])

if result[1] < 0.05:
    print("‚úÖ –†—è–¥ —Å—Ç–∞—Ü—ñ–æ–Ω–∞—Ä–Ω–∏–π")
    d = 0
else:
    print("‚ùå –†—è–¥ –Ω–µ—Å—Ç–∞—Ü—ñ–æ–Ω–∞—Ä–Ω–∏–π ‚Äî –∑—Ä–æ–±–∏–º–æ –ø–µ—Ä—à—É —Ä—ñ–∑–Ω–∏—Ü—é")
    d = 1
    data['diff'] = data['views'].diff()
    plt.figure(figsize=(10, 4))
    plt.plot(data['diff'], color='orange', label='–ü—ñ—Å–ª—è –¥–∏—Ñ–µ—Ä–µ–Ω—Ü—ñ—é–≤–∞–Ω–Ω—è')
    plt.legend()
    plt.title('–°—Ç–∞—Ü—ñ–æ–Ω–∞—Ä–∏–∑–æ–≤–∞–Ω–∏–π —Ä—è–¥')
    plt.grid()
    plt.show()

# === 5. –ü—ñ–¥–±—ñ—Ä p —Ç–∞ q –≤—Ä—É—á–Ω—É (—á–µ—Ä–µ–∑ —Ü–∏–∫–ª) ===
best_aic = float("inf")
best_order = None
best_model = None

# –æ–±–º–µ–∂–∏–º–æ –ø–æ—à—É–∫ 0..3 –¥–ª—è p —ñ q, —â–æ–± –Ω–µ –±—É–ª–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–æ
for p in range(4):
    for q in range(4):
        try:
            model = ARIMA(data['views'], order=(p, d, q))
            results = model.fit()
            if results.aic < best_aic:
                best_aic = results.aic
                best_order = (p, d, q)
                best_model = results
        except:
            continue

print(f"\nüîç –ù–∞–π–∫—Ä–∞—â–∞ –º–æ–¥–µ–ª—å ARIMA{best_order} –∑ AIC = {best_aic:.2f}")

# === 6. –ü—ñ–¥—Å—É–º–æ–∫ –º–æ–¥–µ–ª—ñ ===
print(best_model.summary())

# === 7. –ê–Ω–∞–ª—ñ–∑ –∑–∞–ª–∏—à–∫—ñ–≤ ===
residuals = best_model.resid

plt.figure(figsize=(10, 4))
plt.plot(residuals, label='–ó–∞–ª–∏—à–∫–∏ –º–æ–¥–µ–ª—ñ')
plt.title('–ó–∞–ª–∏—à–∫–∏ ARIMA')
plt.legend()
plt.grid()
plt.show()

sm.qqplot(residuals, line='s')
plt.title("Q-Q –≥—Ä–∞—Ñ—ñ–∫ –∑–∞–ª–∏—à–∫—ñ–≤")
plt.show()

sm.graphics.tsa.plot_acf(residuals, lags=20)
plt.title("–ê–≤—Ç–æ–∫–æ—Ä–µ–ª—è—Ü—ñ—è –∑–∞–ª–∏—à–∫—ñ–≤")
plt.show()

# === 8. –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 10 –ø–µ—Ä—ñ–æ–¥—ñ–≤ ===
forecast_steps = 10
forecast = best_model.forecast(steps=forecast_steps)
forecast_index = pd.date_range(data.index[-1] + pd.Timedelta(days=1), periods=forecast_steps, freq='D')
forecast_series = pd.Series(forecast, index=forecast_index)

# === 9. –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–≥–Ω–æ–∑—É ===
plt.figure(figsize=(10, 4))
plt.plot(data['views'], label='–Ü—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ')
plt.plot(forecast_series, label='–ü—Ä–æ–≥–Ω–æ–∑', color='red')
plt.title(f'–ü—Ä–æ–≥–Ω–æ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–∞ {forecast_steps} –¥–Ω—ñ–≤ —É–ø–µ—Ä–µ–¥ (ARIMA{best_order})')
plt.xlabel('–î–∞—Ç–∞')
plt.ylabel('–ü–µ—Ä–µ–≥–ª—è–¥–∏')
plt.legend()
plt.grid()
plt.show()

print("\nüìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 10 –¥–Ω—ñ–≤ —É–ø–µ—Ä–µ–¥:")
print(forecast_series)


